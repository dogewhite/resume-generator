一、项目背景与目标
本项目旨在构建一个自动化的人才简历处理系统，实现用户上传原始简历文档（PDF、Word）后，系统通过大模型自动抽取结构化字段，并调用后端接口使用 Word 模板生成人才推荐报告文档供用户下载。

目标是实现“一键上传 → 智能结构化 → Word自动生成下载” 的完整闭环，提升 HR、猎头、咨询顾问在简历标准化处理上的效率。

二、功能流程概述
用户上传原始简历文件和招聘JD（支持 PDF、Word 格式）。

用moonshot-v1-32k，根据简历文件内容结构化输出预定义 JSON 格式。

用kimi-thinking-preview模型，综合简历内容、招聘JD以及其他用户可能输入的chat内容和上传的文件，按照要求生成推荐分析。

将二个JSON拼接起来生成综合JSON数据

JSON 数据一方面呈现给用户提供修改和确认选项

用户确认后将最终JSON版本发送至后端 Word 生成接口（基于 docxtpl）。

系统返回 .docx 文件并提供给用户下载。

三、前端模块需求（基于 Streamlit 实现）
1. 页面结构
页面标题：推荐报告助手

上传区域：

支持上传 .pdf .doc .docx .txt .xsl 和图片 文件

支持用户在chat框输入文字

AI 处理反馈：

展示提取后的综合JSON 数据

用户修改确认区域：
对于JSON里的每个字段，用户都可以手动修改确认

下载区域：

若文档生成成功，提供 Word 文件下载按钮

2. 数据处理逻辑

将上传文件送给调用大模型 API，输出结构化 JSON（结构参考第六节）；

用户在可视化界面修改确认后，形成最终确认版JSON

JSON 数据作为请求体 POST 到后端 /generate-doc/ 接口；

接口返回 .docx 文件流，用户点击即可下载。

四、后端接口设计（FastAPI）
接口 1：生成 Word 简历文档
URL：/generate-doc/

方法：POST

请求参数：

JSON 对象（结构参考字段标准）

响应：

Word .docx 文件流（附带文件名）

模板说明
使用 docxtpl 进行 Word 渲染；

模板文件名为 template1.docx，放置在项目根目录；

模板中字段使用 Jinja2 变量语法


五、大模型集成设计

输入内容
提示词结构（Prompt）：

提供预定义字段结构；

用户必须上传：简历文本 + JD（岗位描述）；

用户还可以额外通过 Chat 和其他文件上传补充信息（可选）；

提示语中要求模型输出为严格的 JSON 格式，不可含解释性语言。

输出要求
满足 resume JSON 数据结构的标准格式；

若某些字段无内容，使用 null 或空数组填充。

模型选项（按照上述规定）：

抽取简历基本信息用moonshot-v1-32k，prompt用resume_standardization_prompt.txt,放置于项目根目录。

人才推荐分析用kimi-thinking-preview,prompt同推荐报告prompt.txt，亦放置于项目根目录。

最后把生成的两份JSON拼接到一起，生成final.json


部署环境说明
当前后端使用 FastAPI，暂时部署在本地运行；

前端使用 Streamlit 本地开发；

八、总结说明
本系统构建的是一个完整的“简历→结构化→Word生成”闭环，具备前后端分离结构，支持大模型自定义调用、字段标准一致化与输出格式控制。后续可拓展为人才库管理、匹配系统等模块。